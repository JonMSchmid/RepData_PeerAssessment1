catsbig$Category <- as.factor(catsbig$Category)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = 12000))
text(totchar,totchar, pos = 3, cex = 0.8)
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = 12000))
text(totchar, pos = 3, cex = 0.8)
frame()
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = 12000))
text(totchar, pos = 3, cex = 0.8)
plot(cattot~Category,type = "p", data = catsbig, ylim = 12000))
frame()
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = 12000)
text(totchar, pos = 3, cex = 0.8)
frame()
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = c(0,12000))
text(totchar, pos = 3, cex = 0.8)
frame()
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = c(0,12000))
text(cattot, cattot, pos = 3, cex = 0.8)
frame()
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
catsbig$totchar <- as.character(catsbig$cattot)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = c(0,12000))
text(totchar,pos = 3, cex = 0.8)
text(totchar, cattot ,pos = 3, cex = 0.8)
catsbig
text(cattot, totchar ,pos = 3, cex = 0.8)
frame()
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
catsbig$totchar <- as.character(catsbig$cattot)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = c(0,12000))
text(cattot, totchar ,pos = 3, cex = 0.8)
frame()
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
catsbig$totchar <- as.character(catsbig$cattot)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = c(0,12000), cex = 0.8)
text(cattot, totchar ,pos = 3, cex = 0.8)
frame()
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
catsbig$totchar <- as.character(catsbig$cattot)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = c(0,12000), cex.axis = 0.7)
text(cattot, totchar ,pos = 3, cex = 0.8)
rawdataalc <- subset(rawdatapos, Category = "Alcohol", select = 1:12)
rawdataalc
str(rawdataalc)
rawdataalc <- subset(rawdatapos, Category = Alcohol, select = 1:12)
str(rawdataalc)
rawdataalc <- subset(rawdatapos, Category == "Alcohol", select = 1:12)
rawdataalc
rawdataalc <- subset(rawdatapos, Category == "Alcohol", select = 1:13)
rawdataalc
alcspend <- ddply(rawdataalc, .(Year, Month), summarize, alcspend = sum(Amount, na.rm = TRUE))
alcspend
plot(alcspend~month,type = "p", data = alcspend, cex.axis = 0.7)
plot(alcspend~Month,type = "p", data = alcspend, cex.axis = 0.7)
alcspend <- ddply(rawdataalc, .(MoYe), summarize, alcspend = sum(Amount, na.rm = TRUE))
attach(alcspend)
plot(alcspend~MoYe,type = "p", data = alcspend, cex.axis = 0.7)
alcspend <- ddply(rawdataalc, .(Year, Month), summarize, alcspend = sum(Amount, na.rm = TRUE))
attach(alcspend)
plot(alcspend~Month,type = "p", data = alcspend, cex.axis = 0.7)
alcspend
table(rawdatapos$Category)
table(order(rawdatapos$Category))
table(rawdatapos$Category)
plot(cattot~Category,type = "p", data = catsbig, ylim = c(0,12000), cex.axis = 0.7)
text(cattot, totchar ,pos = 3, cex = 0.8)
frame()
catsbig <- subset(cats, cattot > 500, select = 1:2)
catsbig$Category <- as.character(catsbig$Category) ## this and next line needed to collapse factor
catsbig$Category <- as.factor(catsbig$Category)
catsbig$totchar <- as.character(catsbig$cattot)
attach(catsbig)
plot(cattot~Category,type = "p", data = catsbig, ylim = c(0,12000), cex.axis = 0.7)
text(cattot, totchar ,pos = 3, cex = 0.8)
head(rawdatapos)
Transac <- table(rawdatapos$Transaction)
Transac
str(Transac)
head(Transac)
?sort()
Transac <- Transac[order(Transac[2,]),]
Transac <- as.data.frame.matrix(Transac)
Transac <- as.data.frame(Transac)
str(Transac)
Transac <- Transac[order(Transac$Freq),]
Transac
?grep()
Place <- grep("save", Transac[1,])
Place
Place <- grep("Save", Transac[1,])
Place
Transac[1,]
Place <- grep("Save", Transac[,1])
Place
Transac[Place,]
sum(Transac[Place,])
sum(Transac[Place,2])
sum(Transac[Place, "Amount"])
Placemoneys <- grep("Save", rawdatapos$Category)## money spent in place
sum(Transac[Place, "Amount"])
sum(Placemoneys[Place, "Amount"])
sum(rawdatapos[Placemoneys, "Amount"])
Placemoneys <- grep("Save", rawdatapos$Category)## money spent in place
palcemoneys
Placemoneys
Placemoneys <- grep("Save", rawdatapos$Transaction)## money spent in place
sum(rawdatapos[Placemoneys, "Amount"])
rawdatapos[Placemoneys, ]
sum(rawdatapos[Placemoneys, "Amount"])
download.file(https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip, "Activity.zip")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "Activity.zip")
unzip("activity.zip")
setwd("../Git/RepData_PeerAssessment1/")
unzip("activity.zip")
data <- read.csv("activity.csv", sep = ",", header = TRUE)
data
head(data)
str(data)
data$Date <- as.Date(as.character(rawdata$date), format = "%Y/%m/%d")
str(data)
data$Date <- as.Date(as.character(data$date), format = "%Y/%m/%d") ##Set up date variable
str(data)
head(data)
data$Date <- as.Date(as.character(data$date), format = "%Y-%m-%d") ##Set up date variable
str(data)
head(data)
stepsday <- ddply(data, .(date), summarize, totsteps = sum(steps, na.rm = TRUE)
stepsday <- ddply(data, .(date), summarize, totsteps = sum(steps, na.rm = TRUE))
library(plyr)
stepsday <- ddply(data, .(date), summarize, totsteps = sum(steps, na.rm = TRUE))
stepsday
hist(stepsday$totsteps, xlab = "Number of Steps", main = "Histogram of the total number of steps taken each day")
mean(stepsday$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsday$totsteps)       ## Calculate and report the median total number of steps taken per day
str(data)
stepsminute <- ddply(data, .(interval), summarize, totsteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
stepsminute
attach(stepsminute)
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
attach(stepsminute)
plot(meansteps~interval,type = "l")
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
attach(stepsminute)     ##attach for easier access in plot function
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps" main = "Plot of average steps taken in each time interval over all days")     ##plot average steps taken in each time interval over all days
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Plot of average steps taken in each time interval over all days")     ##plot average steps taken in each time interval over all days
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval")     ##plot average steps taken in each time interval over all days
max(meansteps)
stepsminute[max(meansteps),]
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps)) ## Calculate total steps each interval
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps)) ## Calculate total steps each interval
attach(stepsminute)     ##attach for easier access in plot function
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval")     ##plot average steps taken in each time interval over all days
stepsminute[max(meansteps),]
'''{r}
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
attach(stepsminute)     ##attach for easier access in plot function
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval")     ##plot average steps taken in each time interval over all days
stepsminute[max(meansteps),]
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
attach(stepsminute)     ##attach for easier access in plot function
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval")     ##plot average steps taken in each time interval over all days
stepsminute[max(meansteps),]
stepsminute[max(meansteps),]
tepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
attach(stepsminute)     ##attach for easier access in plot function
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval")     ##plot average steps taken in each time interval over all days
'''{r}
setwd("../Git/RepData_PeerAssessment1/")        ##set working directory
unzip("activity.zip")                           ##Unzip file
data <- read.csv("activity.csv", sep = ",", header = TRUE)      ##Read activity file
data$Date <- as.Date(as.character(data$date), format = "%Y-%m-%d")      ##Set up date variable
setwd("../Git/RepData_PeerAssessment1/")        ##set working directory
unzip("activity.zip")                           ##Unzip file
data <- read.csv("activity.csv", sep = ",", header = TRUE)      ##Read activity file
data$Date <- as.Date(as.character(data$date), format = "%Y-%m-%d")      ##Set up date variable
library(plyr)
stepsday <- ddply(data, .(date), summarize, totsteps = sum(steps, na.rm = TRUE)) ## Calculate total steps each day
hist(stepsday$totsteps, xlab = "Number of Steps", main = "Histogram of the total number of steps taken each day") ##create histogram of steps taken each day
mean(stepsday$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsday$totsteps)       ## Calculate and report the median total number of steps taken per day
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
attach(stepsminute)     ##attach for easier access in plot function
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval")     ##plot average steps taken in each time interval over all days
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval", data = stepsminute)     #
stepsminute[max(meansteps),]
str(stepsminute)
stepsminute
max(stepsminute$meansteps)
stepsminute[which(max(stepsminute$meansteps),]
stepsminute[which.max(stepsminute$meansteps),]
maxsteps <- stepsminute[which.max(stepsminute$meansteps),] ##subset for interval with most steps
maxsteps
sum(is.na(data$steps))
datana <- is.na(data$steps)
datana
data[datana,]
data[1,]
data[1,"steps"]
head(stepsminute)
str(stepsminute)
stepsminute$interval = 5
head(stepsminute)
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
head(stepsminute)
stepsminute[stepsminute$interval = 5,]
stepsminute[stepsminute$interval == 5,]
stepsminute[stepsminute$interval == 5,2]
sum(is.na(data$steps)) ## calculate total NAs in data set
for (i in nrows(data)){
if is.na(data[i,"steps"]){
data[i, "steps"] <- stepsminute[stepsminute$interval == data[i,"interval"],"meansteps"]
}
}
nrows(data)
nrow(data)
for (i in nrow(data)){
if is.na(data[i,"steps"]){
data[i, "steps"] <- stepsminute[stepsminute$interval == data[i,"interval"],"meansteps"]
}
}
for (i in nrow(data)){
if (is.na(data[i,"steps"])){
data[i, "steps"] <- stepsminute[stepsminute$interval == data[i,"interval"],"meansteps"]
}
}
sum(is.na(data$steps)) ## calculate total NAs in data set
sum(is.na(data$steps)) ## calculate total NAs in data set
head(data)
is.na(data[1,"steps"])
data[i, "steps"]
data[1, "steps"]
data[1, "steps"] <- stepsminute[stepsminute$interval == data[1,"interval"],"meansteps"]
data[1, "steps"]
head(meansteps)
?if
()
data[5, "steps"]
data[5, "steps"] <- stepsminute[stepsminute$interval == data[5,"interval"],"meansteps"]
data[5, "steps"]
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval", data = stepsminute)     ##plot average steps taken in each time interval over all days
maxsteps <- stepsminute[which.max(stepsminute$meansteps),] ##subset for interval with most steps
maxsteps
sum(is.na(data$steps)) ## calculate total NAs in data set
for (i in nrow(data)){
if (is.na(data[i,"steps"])){
data[i, "steps"] <- stepsminute[stepsminute$interval == data[i,"interval"],"meansteps"]
}
}
sum(is.na(data$steps)) ## calculate total NAs in data set
is.na(data[i,"steps"])
is.na(data[1,"steps"])
is.na(data[1,"steps"])
head(data)
## Loading and preprocessing the data
'''{r}
setwd("../Git/RepData_PeerAssessment1/")        ##set working directory
unzip("activity.zip")                           ##Unzip file
data <- read.csv("activity.csv", sep = ",", header = TRUE)      ##Read activity file
data$Date <- as.Date(as.character(data$date), format = "%Y-%m-%d")      ##Set up date variable
'''
## What is mean total number of steps taken per day?
'''{r}
library(plyr)
stepsday <- ddply(data, .(date), summarize, totsteps = sum(steps, na.rm = TRUE)) ## Calculate total steps each day
hist(stepsday$totsteps, xlab = "Number of Steps", main = "Histogram of the total number of steps taken each day") ##create histogram of steps taken each day
mean(stepsday$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsday$totsteps)       ## Calculate and report the median total number of steps taken per day
'''
## What is the average daily activity pattern?
'''{r}
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval", data = stepsminute)     ##plot average steps taken in each time interval over all days
maxsteps <- stepsminute[which.max(stepsminute$meansteps),] ##subset for interval with most steps
maxsteps
## Imputing missing values
sum(is.na(data$steps)) ## calculate total NAs in data set
for (i in nrow(data)){
if (is.na(data[i,"steps"])){
data[i, "steps"] <- stepsminute[stepsminute$interval == data[i,"interval"],"meansteps"]
}
}
setwd("../Git/RepData_PeerAssessment1/")        ##set working directory
unzip("activity.zip")                           ##Unzip file
data <- read.csv("activity.csv", sep = ",", header = TRUE)      ##Read activity file
data$Date <- as.Date(as.character(data$date), format = "%Y-%m-%d")      ##Set up date variable
library(plyr)
stepsday <- ddply(data, .(date), summarize, totsteps = sum(steps, na.rm = TRUE)) ## Calculate total steps each day
hist(stepsday$totsteps, xlab = "Number of Steps", main = "Histogram of the total number of steps taken each day") ##create histogram of steps taken each day
mean(stepsday$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsday$totsteps)       ## Calculate and report the median total number of steps taken per day
'''
## What is the average daily activity pattern?
'''{r}
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval", data = stepsminute)     ##plot average steps taken in each time interval over all days
maxsteps <- stepsminute[which.max(stepsminute$meansteps),] ##subset for interval with most steps
maxsteps
sum(is.na(data$steps)) ## calculate total NAs in data set
head(data)
is.na(data[1,"steps"]
)
nrow(data)
for (i in 5){
i
if (is.na(data[i,"steps"])){
data[i, "steps"] <- stepsminute[stepsminute$interval == data[i,"interval"],"meansteps"]
}
}
for (i in 5){
print(i)
if (is.na(data[i,"steps"])){
data[i, "steps"] <- stepsminute[stepsminute$interval == data[i,"interval"],"meansteps"]
}
}
for (i in 1:nrow(data)){
if (is.na(data[i,"steps"])){
data[i, "steps"] <- stepsminute[stepsminute$interval == data[i,"interval"],"meansteps"]
}
}
sum(is.na(data$steps))
head(data)
data()
data
mean(stepsday$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsday$totsteps)
stepsday <- ddply(data, .(date), summarize, totsteps = sum(steps, na.rm = TRUE)) ## Recalculate daily steps
hist(stepsday$totsteps, xlab = "Number of Steps", main = "Histogram of the total number of steps taken each day") ##create histogram of steps taken each day
mean(stepsday$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsday$totsteps)       ## Calculate and report the median total number of steps taken per day
---
title: 'Reproducible Research: Peer Assessment 1'
output:
html_document:
keep_md: yes
theme: readable
---
## Loading and preprocessing the data
```{r}
##setwd("../Git/RepData_PeerAssessment1/")        ##set working directory
unzip("activity.zip")                           ##Unzip file
data <- read.csv("activity.csv", sep = ",", header = TRUE)      ##Read activity file
data$Date <- as.Date(as.character(data$date), format = "%Y-%m-%d")      ##Set up date variable
```
## What is mean total number of steps taken per day?
```{r}
library(plyr)
stepsday <- ddply(data, .(date), summarize, totsteps = sum(steps, na.rm = TRUE)) ## Calculate total steps each day
hist(stepsday$totsteps, xlab = "Number of Steps", main = "Histogram of the total number of steps taken each day") ##create histogram of steps taken each day
mean(stepsday$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsday$totsteps)       ## Calculate and report the median total number of steps taken per day
```
## What is the average daily activity pattern?
```{r}
stepsminute <- ddply(data, .(interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
plot(meansteps~interval,type = "l",xlab = "Interval", ylab = "Average Steps", main = "Average steps taken per interval", data = stepsminute)     ##plot average steps taken in each time interval over all days
maxsteps <- stepsminute[which.max(stepsminute$meansteps),] ##subset for interval with most steps
maxsteps
datar <- data
str(datar)
for (i in 1:nrow(datar)){        ##Replace NAs with mean for that interval
if (is.na(datar[i,"steps"])){
datar[i, "steps"] <- stepsminute[stepsminute$interval == datar[i,"interval"],"meansteps"]
}
}
stepsdayr <- ddply(datar, .(date), summarize, totsteps = sum(steps)) ## Recalculate daily steps
hist(stepsdayr$totsteps, xlab = "Number of Steps", main = "Histogram of the total number of steps taken each day") ##create histogram of steps taken each day
mean(stepsdayr$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsdayr$totsteps)       ## Calcula
mean(stepsday$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsday$totsteps)
is.na(data$steps)
datar[is.na(data$steps),]
stepsminute
?weekdays()
asPOSIXlt(dataR$Date)
as.POSIXlt(dataR$Date)
as.POSIXlt(datar$Date)
as.POSIXlt(datar$Date)$wday
datarweekday <- datar[as.POSIXlt(datar$Date)$wday > 1,]
as.POSIXlt(datar$Date)$wday
as.POSIXlt(datarweekday$Date)$wday
datarweekend <- datar[as.POSIXlt(datar$Date)$wday > 2,]
datarweekend
as.POSIXlt(datarweekend$Date)$wday
datarweekend <- datar[as.POSIXlt(datar$Date)$wday < 2,]
as.POSIXlt(datarweekend$Date)$wday
if (datar[as.POSIXlt(datar$Date)$wday) == 0){
datar$day <- "Weekend"
}
datar$day
datar
if (datar[as.POSIXlt(datar$Date)$wday == 1:5){
datar$day <- "Weekday"
}
datar
if (datar[as.POSIXlt(datar$Date)$wday == 1:5){
datar$day <- "Weekday"
}
if (datar[as.POSIXlt(datar$Date)$wday == 1:5,]){
datar$day <- "Weekday"
}
datar[as.POSIXlt(datar$Date)$wday == 1:5,"day"] <- "Weekday"
datar
datar[as.POSIXlt(datar$Date)$wday == 1:5,"day"] <- "Weekend"
datar
datar <- data
datar
datar[as.POSIXlt(datar$Date)$wday == 1:5,"day"] <- "Weekend"
datar
datar <- data
datar[as.POSIXlt(datar$Date)$wday == 1,]
datar[as.POSIXlt(datar$Date)$wday == 1,"day"] <- "Weekday"
datar
datar[as.POSIXlt(datar$Date)$wday == 1:5,"day"] <- "Weekday"
datar[which(as.POSIXlt(datar$Date)$wday == 1:5),"day"] <- "Weekday"
datar[as.POSIXlt(datar$Date)$wday > 0 & as.POSIXlt(datar$Date)$wday < 6,"day"] <- "Weekday"
datar
datar[as.POSIXlt(datar$Date)$wday < 1 & as.POSIXlt(datar$Date)$wday > 5,"day"] <- "Weekend"
datar
datar[as.POSIXlt(datar$Date)$wday < 1 | as.POSIXlt(datar$Date)$wday > 5,"day"] <- "Weekend"
datar
str(datar)
datar <- data           ##Create new data frame in which to replace NA values
sum(is.na(data$steps))          ## calculate total NAs in data set
for (i in 1:nrow(datar)){        ##Replace NAs with mean for that interval
if (is.na(datar[i,"steps"])){
datar[i, "steps"] <- stepsminute[stepsminute$interval == datar[i,"interval"],"meansteps"]
}
}
stepsdayr <- ddply(datar, .(date), summarize, totsteps = sum(steps)) ## Recalculate daily steps
hist(stepsdayr$totsteps, xlab = "Number of Steps", main = "Histogram of the total number of steps taken each day") ##create histogram of steps taken each day
mean(stepsdayr$totsteps)         ## Calculate and report the mean total number of steps taken per day
median(stepsdayr$totsteps)
datar[as.POSIXlt(datar$Date)$wday > 0 & as.POSIXlt(datar$Date)$wday < 6,"day"] <- "Weekday"
datar[as.POSIXlt(datar$Date)$wday < 1 | as.POSIXlt(datar$Date)$wday > 5,"day"] <- "Weekend"
datar
str(datar)
datar$day <- as.factor(datar$day)
str(datar)
stepsminuteday <- ddply(datar, .(day,interval), summarize, meansteps = mean(steps, na.rm = TRUE)) ## Calculate total steps each interval
str(stepsminuteday)
library(lattice)
plot.set <- function(x, y) {
panel.loess(x, y)  # show smoothed line
}
xyplot(meansteps~interval|day, scales=list(cex=.8, col="red"), data = stepsminutedaypanel=panel.set,
xlab="x", ylab="y",
main="title"),
xyplot(meansteps~interval|day, scales=list(cex=.8, col="red"), data = stepsminutedaypanel=panel.set,
xlab="x", ylab="y",
main="title")
xyplot(meansteps~interval|day, scales=list(cex=.8, col="red"), data = stepsminuteday, panel=panel.set,
xlab="x", ylab="y",
main="title")
xyplot(meansteps~interval|day, scales=list(cex=.8, col="red"), data = stepsminuteday, panel=plot.set,
xlab="x", ylab="y",
main="title")
xyplot(meansteps~interval|day, scales=list(cex=.8, col="red"), layout = c(1, 2), data = stepsminuteday, panel=plot.set,    xlab="x", ylab="y", main="title")
library(lattice)
plot.set <- function(x, y) {
panel.xyplot(x, y) # show points
panel.loess(x, y)  # show smoothed line
}
xyplot(meansteps~interval|day, scales=list(cex=.8, col="red"), layout = c(1, 2), data = stepsminuteday, panel=plot.set,    xlab="x", ylab="y", main="title")
xyplot(meansteps~interval|day, scales=list(cex=.8, col="red"), layout = c(1, 2), data = stepsminuteday, panel=plot.set,    xlab="x", ylab="y", main="title", type = l)
xyplot(meansteps~interval|day, scales=list(cex=.8, col="red"), layout = c(1, 2), data = stepsminuteday, panel=plot.set,    xlab="x", ylab="y", main="title", type = "l")
xyplot(meansteps~interval|day, scales=list(cex=.8, col="red"), layout = c(1, 2), data = stepsminuteday, panel=plot.set,    xlab="x", ylab="y", main="title", type = "l")
xyplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday, panel=plot.set,    xlab="x", ylab="y", main="title", type = "l")
help(xyplot)
dotplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday, panel=plot.set,    xlab="x", ylab="y", main="title", type = "l")
dotplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday, panel=plot.set,    xlab="x", ylab="y", main="title", type = "l")
bwplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday, panel=plot.set,    xlab="x", ylab="y", main="title", type = "l")
bwplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday,xlab="x", ylab="y", main="title", type = "l")
xyplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday,xlab="x", ylab="y", main="title", type = "l")
xyplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday,xlab="Interval", ylab="Average steps", main="Average number of steps taken per interval, averaged across all weekday days or weekend days", type = "l")
xyplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday,xlab="Interval", ylab="Average steps", main= paste("Average number of steps taken per interval," \n" averaged across all weekday days or weekend days", type = "l")
xyplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday,xlab="Interval", ylab="Average steps", main= paste("Average number of steps taken per interval," \n" averaged across all weekday days or weekend days"), type = "l")
xyplot(meansteps~interval|day, scales=list(cex=.8), layout = c(1, 2), data = stepsminuteday,xlab="Interval", ylab="Average steps", main= "Average number of steps taken per interval \n averaged across all weekday days or weekend days", type = "l")
